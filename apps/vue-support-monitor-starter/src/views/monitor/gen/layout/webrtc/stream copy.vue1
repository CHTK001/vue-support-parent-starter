<template>
  <div id="callPage" class="call-page">
    <video id="localVideo" autoplay />
    <video id="remoteVideo" autoplay />
  </div>
</template>
<script>
import { fetchSetting, socket } from "@repo/core";
import { message } from "@repo/utils";

export default {
  name: "Call",
  data() {
    return {
      socket: null,
      yourConn: null,
      connectedUser: null,
      stream: null,
      localVideo: null,
      remoteVideo: null
    };
  },
  async mounted() {
    const config = await this.getWebrtcConfig();
    if (config.webrtcOpen !== "true") {
      message("WebRTC未开启", { type: "error" });
      throw new Error("WebRTC is not enabled");
    }
  },
  unmounted() {
    this.socket?.close();
  },
  methods: {
    async handleCall() {
      // callPage.style.display = "none";
      var PeerConnection = window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.RTCPeerConnection || undefined;
      var RTCSessionDescription = window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.RTCSessionDescription || undefined;

      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
      //getting local video stream
      navigator.getUserMedia(
        { video: true, audio: true },
        function (myStream) {
          this.stream = myStream;

          //displaying local video stream on the page
          this.localVideo.srcObject = stream;

          //using Google public stun server
          var configuration = {
            iceServers: []
          };

          this.yourConn = new PeerConnection(configuration);

          // setup stream listening
          this.yourConn.addStream(stream);

          //when a remote user adds stream to the peer connection, we display it
          this.yourConn.onaddstream = function (e) {
            remoteVideo.srcObject = e.stream;
          };

          // Setup ice handling
          this.yourConn.onicecandidate = function (event) {
            if (event.candidate) {
              this.send({
                type: "candidate",
                candidate: event.candidate
              });
            }
          };

          // create an offer
          this.yourConn.createOffer(
            function (offer) {
              this.send({
                type: "offer",
                offer: offer
              });

              this.yourConn.setLocalDescription(offer);
            },
            function (error) {
              alert("Error when creating an offer");
            }
          );
        },
        function (error) {
          console.log(error);
        }
      );
    },
    async handleOut() {
      this.send({
        type: "leave"
      });

      this.handleLeave();
    },

    //when we got an answer from a remote user
    async handleAnswer(answer) {
      this.yourConn.setRemoteDescription(new RTCSessionDescription(answer));
    },

    //when we got an ice candidate from a remote user
    async handleCandidate(candidate) {
      this.yourConn.addIceCandidate(new RTCIceCandidate(candidate));
    },
    async handleLeave() {
      this.remoteVideo.srcObject = null;
      this.yourConn.close();
      this.yourConn.onicecandidate = null;
      this.yourConn.onaddstream = null;
    },
    //when somebody sends us an offer
    async handleOffer(offer, name) {
      connectedUser = name;
      this.yourConn.setRemoteDescription(new RTCSessionDescription(offer));

      //create an answer to an offer
      this.yourConn.createAnswer(
        function (answer) {
          this.yourConn.setLocalDescription(answer);

          this.send({
            type: "answer",
            answer: answer
          });
        },
        function (error) {
          alert("Error when creating an answer");
        }
      );
    },
    async initialSocket() {
      this.socket = socket(config.webrtcUrl.split(","), config.webrtcContext || "/socket.io");
      this.onMessage();
    },
    async onMessage() {
      this.socket.on("message", msg => {
        console.log("Got message", msg.data);

        var data = JSON.parse(msg.data);

        switch (data.type) {
          case "login":
            handleLogin(data.success);
            break;
          //when somebody wants to call us
          case "offer":
            this.handleOffer(data.offer, data.name);
            break;
          case "answer":
            this.handleAnswer(data.answer);
            break;
          //when a remote peer sends an ice candidate to us
          case "candidate":
            this.handleCandidate(data.candidate);
            break;
          case "leave":
            this.handleLeave();
            break;
          default:
            break;
        }
      });
    },
    async send(message) {
      //attach the other peer username to our messages
      if (connectedUser) {
        message.name = connectedUser;
      }

      this.socket.emit(JSON.stringify(message));
    },
    async getWebrtcConfig() {
      const { data } = await fetchSetting("webrtc");
      const rs = {};
      data.forEach(item => {
        const key = item["sysSettingName"];
        rs[key] = item["sysSettingValue"];
      });

      return rs;
    }
  }
};
</script>
