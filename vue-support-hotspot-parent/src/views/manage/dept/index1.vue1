<script setup lang="ts">
import { h, reactive, ref, nextTick, toRaw, watch } from "vue";

import SaveDialog from "./save.vue";
import Delete from "@iconify-icons/ep/delete";
import EditPen from "@iconify-icons/ep/edit-pen";
import Refresh from "@iconify-icons/line-md/backup-restore";
import Edit from "@iconify-icons/line-md/plus";

import { debounce } from "@pureadmin/utils";
import { deleteDept, addDept, updateDept, deptList, Dept } from "@/api/dept";
import { message } from "@/utils/message";
import { useI18n } from "vue-i18n";
import { transformI18n } from "@/plugins/i18n";
import { useRenderIcon } from "@/components/ReIcon/src/hooks";
import { ElTree } from "element-plus";

const { t } = useI18n();
const form = reactive({});

const visible = reactive({
  save: false
});

const loading = reactive({
  query: false
});
const formRef = ref();
const table = ref(null);
const saveDialog = ref(null);

const resetForm = async formRef => {
  formRef.resetFields();
  onSearch();
};

const tableData = reactive([]);

const doChange = async (data, form) => {
  if (!data) {
    return;
  }
  const item = data.filter(item => item.sysDeptId === form.sysDeptId);
  if (null != item && item.length > 0) {
    Object.assign(item[0], form);
    return true;
  }
  for (var i = 0; i < data.length; i++) {
    if (doChange(data[i]?.children, form)) {
      break;
    }
  }
  return true;
};
const onSuccess = async (mode, form) => {
  if (mode == "edit") {
    const item = tableData.filter(item => item.sysDeptId === form.sysDeptId);
    if (null != item && item.length > 0) {
      Object.assign(item[0], form);
      return;
    }
    for (var i = 0; i < tableData.length; i++) {
      if (doChange(tableData[i]?.children, form)) {
        break;
      }
    }

    return;
  }
  onSearch();
};
const onSearch = debounce(
  async () => {
    loading.query = true;
    deptList(form)
      .then(res => {
        const { data, code } = res;
        tableData = data;
        return;
      })
      .catch(error => {
        message(t("message.queryFailed"), { type: "error" });
      })
      .finally(() => {
        loading.query = false;
      });
  },
  1000,
  true
);

onSearch();

const getOpenDetail = async (row, column, event) => {
  if (row.children && column.label != "操作") {
    if (event.currentTarget.querySelector(".el-table__expand-icon")) {
      event.currentTarget.querySelector(".el-table__expand-icon").click();
    }
  }
};

const saveDialogParams = reactive({
  mode: "save"
});

const onDelete = async row => {
  try {
    await deleteDept(row.sysDeptId);
    onSearch();
    message(t("message.deleteSuccess"), { type: "success" });
    return;
  } catch (error) {}
};

const dialogOpen = async (item, mode) => {
  visible.save = true;
  await nextTick();
  saveDialog.value.setTableData(tableData).setData(item).open(mode);
};

const dialogClose = async () => {
  visible.save = false;
};

interface Tree {
  id: number;
  label: string;
  pId: number;
  children?: Tree[];
}

const defaultProps = {
  id: "sysDeptId",
  label: "sysDeptName",
  children: "children"
};

const handleNodeClick = (data: Tree) => {
  // console.log(data);
};

const append = (data: Tree) => {
  console.log(data);
};

const remove = (node: Node, data: Tree) => {
  console.log(node, data);
};
const filterText = ref("");
const treeRef = ref<InstanceType<typeof ElTree>>();
watch(filterText, val => {
  treeRef.value!.filter(val);
});

const filterNode = (value: string, data: Tree) => {
  if (!value) return true;
  return data.label.includes(value);
};
</script>

<template>
  <div>
    <SaveDialog
      v-if="visible.save"
      ref="saveDialog"
      :mode="saveDialogParams.mode"
      @success="onSuccess"
      @close="dialogClose"
    />
    <div class="main">
      <el-container>
        <el-header>
          <div class="left-panel" />
          <div class="right-panel">
            <div class="right-panel-search">
              <el-button
                type="primary"
                :icon="useRenderIcon('ri:search-line')"
                :loading="loading.query"
                @click="onSearch"
              />
              <el-button
                :icon="useRenderIcon(Edit)"
                @click="dialogOpen({}, 'save')"
              />
            </div>
          </div>
        </el-header>
        <el-main class="nopadding">
          <div class="h-full">
            <!-- <el-input
              v-model="filterText"
              style="width: 240px"
              placeholder="请输入组织机构名称"
            /> -->
            <el-tree
              style="max-width: 98%"
              :data="tableData"
              :props="defaultProps"
              node-key="sysDeptId"
              highlight-current
              default-expand-all
              :expand-on-click-node="false"
              :filter-node-method="filterNode"
              @node-click="handleNodeClick"
            >
              <template #default="{ node, data }">
                <span class="custom-tree-node" style="width: 100%">
                  <span>{{ node.label }}</span>
                  <span style="float: right; margin-right: 10px">
                    <el-button
                      size="small"
                      plain
                      link
                      type="primary"
                      :icon="useRenderIcon(EditPen)"
                      @click="dialogOpen(data, 'edit')"
                      >编辑</el-button
                    >
                    <el-button
                      size="small"
                      plain
                      link
                      type="primary"
                      :icon="useRenderIcon(Edit)"
                      @click="
                        dialogOpen(
                          {
                            sysDeptPid: data.sysDeptId
                          } as any,
                          'save'
                        )
                      "
                      >新增</el-button
                    >
                    <el-popconfirm
                      title="确定删除吗？"
                      @confirm="onDelete(data)"
                    >
                      <template #reference>
                        <el-button
                          size="small"
                          type="danger"
                          plain
                          link
                          :icon="useRenderIcon(Delete)"
                          >删除</el-button
                        >
                      </template>
                    </el-popconfirm>
                    <!-- <a style="margin-left: 10px" @click="append(data)">
                      编辑
                    </a> -->
                    <!-- <a style="margin-left: 10px" @click="append(data)">
                      新增
                    </a> -->
                    <!-- <a style="margin-right: 10px" @click="remove(node, data)">
                      删除
                    </a> -->
                  </span>
                </span>
              </template>
            </el-tree>
            <el-skeleton v-if="loading.query" animated :count="6" />
            <!-- <el-table
              v-else
              :data="tableData"
              style="width: 100%; margin-bottom: 20px"
              row-key="sysDeptId"
              border
              @row-click="getOpenDetail"
            >
              <el-table-column prop="sysDeptId" label="机构ID" />
              <el-table-column prop="sysDeptName" label="机构名称" />
              <el-table-column prop="sysDeptTreeId" label="机构链路" />
              <el-table-column label="操作">
                <template #default="{ row }">
                  <el-button
                    size="small"
                    plain
                    link
                    type="primary"
                    :icon="useRenderIcon(EditPen)"
                    @click="dialogOpen(row, 'edit')"
                    >编辑</el-button
                  >
                  <el-button
                    size="small"
                    plain
                    link
                    type="primary"
                    :icon="useRenderIcon(Edit)"
                    @click="
                      dialogOpen({ sysMenuPid: row.sysMenuId } as any, 'save')
                    "
                    >新增</el-button
                  >
                  <el-popconfirm title="确定删除吗？" @confirm="onDelete(row)">
                    <template #reference>
                      <el-button
                        size="small"
                        type="danger"
                        plain
                        link
                        :icon="useRenderIcon(Delete)"
                        >删除</el-button
                      >
                    </template>
                  </el-popconfirm>
                </template>
              </el-table-column>
            </el-table> -->
          </div>
        </el-main>
      </el-container>
    </div>
  </div>
</template>

<style scoped lang="scss">
:deep(.el-dropdown-menu__item i) {
  margin: 0;
}

:deep(.el-tree-node__content) {
  height: 38px;
  line-height: 38px;
}

.search-form {
  :deep(.el-form-item) {
    margin-bottom: 12px;
  }
}
</style>
